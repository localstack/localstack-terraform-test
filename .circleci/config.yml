version: 2.1

orbs:
  localstack: localstack/platform@1.0.1

jobs:
  build:
    machine:
      image: ubuntu-2004:202107-02
    executor: localstack/default
    parallelism: 6
    environment:
      DOWNLOAD_TEST_BIN: 1
      KINESIS_PROVIDER: kinesalite
    steps:
      - checkout

      # start LocalStack asynchronously
      - localstack/start

      - run: git submodule update --init --recursive

      - restore_cache:
          keys:
            - localstack-cache

# Note: only required if not using the precompiled test binary (DOWNLOAD_TEST_BIN=0)
#      - run:
#          name: "Installing prerequisites"
#          command: |
#            go_tgz=/home/circleci/.cache/go1.17.tar.gz
#            test -f $go_tgz || wget -O $go_tgz https://go.dev/dl/go1.17.8.linux-amd64.tar.gz
#            sudo mv /usr/local/go /usr/local/go.bk
#            (cd /tmp; tar -xzf $go_tgz; sudo mv go /usr/local/go)
#            go version

      - run:
          name: "Install test binary"
          command: |
            # force re-downloading of test binary, for now
            rm -rf $HOME/.cache/localstack/allservices.test
            bin/install-aws-test

      - save_cache:
          key: localstack-cache
          paths:
#            - /home/circleci/.cache/go1.17.tar.gz
            - /home/circleci/.cache/localstack/allservices.test

      - run:
          name: "Preparing test environment"
          command: |
            virtualenv --python=`which python3.8` .venv
            source .venv/bin/activate
            pip install -r requirements.txt
            python -m tests.generator

      # wait for LocalStack to become available
      - localstack/wait

      # main test suite
      - run:
          name: "Running test suite"
          command: |
            source .venv/bin/activate
            TEST_CASES=$(bin/select-tests | xargs | sed 's/ / or /g')
            echo "Running test cases: $TEST_CASES"
            python -m pytest --durations=20 tests/ --tests-per-worker 4 -k "$TEST_CASES" || true
          # command: bin/run-tests -t $TEST_CASES

      - run:
          name: "Generating test reports"
          command: |
            source .venv/bin/activate
            bin/create-report || true

      - store_test_results:
          path: target/reports-xunit
      - store_artifacts:
          path: target/logs

      - persist_to_workspace:
          root:
            target/
          paths:
            - reports-xunit
            - logs

  report:
    machine:
      image: ubuntu-2004:202107-02
    steps:
      - checkout

      - attach_workspace:
          at: target/

      - run:
          name: "Preparing environment"
          command: |
            virtualenv --python=`which python3.8` .venv
            source .venv/bin/activate
            pip install -r requirements.txt

      # save build reports as artifacts
      - run:
          name: "Creating combined HTML test report"
          when: always
          command: |
            ls -la target/ || true
            source .venv/bin/activate
            bin/create-report-html || true

      - store_artifacts:
          path: target/reports-html

workflows:
  main:
    when:
      or:
        - equal: [ build, << pipeline.git.branch >> ]
        - equal: [ build-new, << pipeline.git.branch >> ]
    jobs:
      - build
      - report:
          requires:
            - build
