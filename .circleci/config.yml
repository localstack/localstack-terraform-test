version: 2.1

orbs:
  localstack: localstack/platform@1.0.1

jobs:
  build:
    machine:
      image: ubuntu-2004:202107-02
    executor: localstack/default
    parallelism: 4
    environment:
      DOWNLOAD_TEST_BIN: 1
      KINESIS_PROVIDER: kinesalite
    steps:
      - checkout

      # start LocalStack asynchronously
      - localstack/start

      - run: git submodule update --init --recursive

      - restore_cache:
          keys:
            - localstack-cache

      - run:
          name: "Installing prerequisites"
          command: |
            go_tgz=/home/circleci/.cache/go1.17.tar.gz
            test -f $go_tgz || wget -O $go_tgz https://go.dev/dl/go1.17.8.linux-amd64.tar.gz
            sudo mv /usr/local/go /usr/local/go.bk
            (cd /tmp; tar -xzf $go_tgz; sudo mv go /usr/local/go)
            go version

      - save_cache:
          key: localstack-cache
          paths:
            - /home/circleci/.cache/go1.17.tar.gz

      - run:
          name: "Install test binary"
          command: |
            # force re-downloading
            rm -rf .cache/localstack/aws.combined.test
            bin/install-aws-test
      # - run:
      #     name: "Installing LocalStack"
      #     command: |
      #       cd localstack
      #       virtualenv --python=`which python3.8` .venv
      #       make install
      #       cd ..
      - run:
          name: "Preparing test environment"
          command: |
            virtualenv --python=`which python3.8` .venv
            source .venv/bin/activate
            pip install -r requirements.txt
            # pip install -r localstack/requirements.txt
            # pip install -e ./localstack/
            # pip install -e ./moto/
            python -m tests.generator

      # wait for LocalStack to become available
      - localstack/wait

      # main test suite
      - run:
          name: "Running test suite"
          command: |
            source .venv/bin/activate
            TEST_CASES=$(cat localstack-tests.incl.txt | circleci tests split --split-by=timings | xargs | sed 's/ / or /g')
            echo "Running test cases: $TEST_CASES"
            python -m pytest tests/ --tests-per-worker 3 -k "$TEST_CASES"
          # command: bin/run-tests -t $TEST_CASES

      # save build reports as artifacts
      - run:
          name: "Creating reports"
          when: always
          command: |
            source .venv/bin/activate
            bin/create-report || true
            bin/create-report-html || true
            mkdir -p /tmp/results/
            mv build/report.html /tmp/report || true
            mv build/tests/*.html /tmp/report/tests || true
            # temporarily also uploading XML files, for debugging
            cp build/tests/*.xml /tmp/report/tests || true
            mv build/tests/*.xml /tmp/results || true

      - store_test_results:
          path: target/reports-xunit
      - store_artifacts:
          path: target/logs
      - store_artifacts:
          path: target/reports-html

workflows:
  main:
    when:
      or:
        - equal: [ build, << pipeline.git.branch >> ]
        - equal: [ build-new, << pipeline.git.branch >> ]
    jobs:
      - build
