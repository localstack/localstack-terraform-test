diff --git a/internal/conns/config.go b/internal/conns/config.go
index f78faf39c5..5298f2fc10 100644
--- a/internal/conns/config.go
+++ b/internal/conns/config.go
@@ -76,6 +76,20 @@ type Config struct {
        UseFIPSEndpoint                bool
 }

+// XXX: added by whummer
+func GetLocalEndpoints() map[string]string {
+       const localEndpoint = "http://localhost:4566"
+       var localEndpoints = map[string]string{}
+       for _, name := range names.Aliases() {
+               if name == "s3" {
+                       localEndpoints[name] = "http://s3.localhost.localstack.cloud:4566"
+               } else {
+                       localEndpoints[name] = localEndpoint
+               }
+       }
+       return localEndpoints
+}
+
 // Client configures and returns a fully initialized AWSClient
 func (c *Config) Client(ctx context.Context) (interface{}, diag.Diagnostics) {
        awsbaseConfig := awsbase.Config{
@@ -176,6 +190,10 @@ func (c *Config) Client(ctx context.Context) (interface{}, diag.Diagnostics) {
                DNSSuffix = p.DNSSuffix()
        }

+       // XXX: added by whummer
+       // insert custom endpoints
+       c.Endpoints = GetLocalEndpoints()
+
        client := c.clientConns(sess)

        client.AccountID = accountID
diff --git a/internal/provider/provider.go b/internal/provider/provider.go
index c9548a4dae..fcc68d2379 100644
--- a/internal/provider/provider.go
+++ b/internal/provider/provider.go
@@ -2076,7 +2076,7 @@ func providerConfigure(ctx context.Context, d *schema.ResourceData, terraformVer
                CustomCABundle:                 d.Get("custom_ca_bundle").(string),
                EC2MetadataServiceEndpoint:     d.Get("ec2_metadata_service_endpoint").(string),
                EC2MetadataServiceEndpointMode: d.Get("ec2_metadata_service_endpoint_mode").(string),
-               Endpoints:                      make(map[string]string),
+               Endpoints:                      conns.GetLocalEndpoints(),  // XXX: added by whummer
                HTTPProxy:                      d.Get("http_proxy").(string),
                IgnoreTagsConfig:               expandProviderIgnoreTags(d.Get("ignore_tags").([]interface{})),
                Insecure:                       d.Get("insecure").(bool),
