diff --git a/internal/service/acmpca/certificate_authority.go b/internal/service/acmpca/certificate_authority.go
index 49a18686d2..ff3798f440 100644
--- a/internal/service/acmpca/certificate_authority.go
+++ b/internal/service/acmpca/certificate_authority.go
@@ -313,7 +313,7 @@ func resourceCertificateAuthorityCreate(d *schema.ResourceData, meta interface{}

        log.Printf("[DEBUG] Creating ACM PCA Certificate Authority: %s", input)
        var output *acmpca.CreateCertificateAuthorityOutput
-       err := resource.Retry(1*time.Minute, func() *resource.RetryError {
+       err := resource.Retry(5*time.Second, func() *resource.RetryError {
                var err error
                output, err = conn.CreateCertificateAuthority(input)
                if err != nil {
diff --git a/internal/service/cloudfront/distribution.go b/internal/service/cloudfront/distribution.go
index 65a7afb931..80229ea0b5 100644
--- a/internal/service/cloudfront/distribution.go
+++ b/internal/service/cloudfront/distribution.go
@@ -833,7 +833,7 @@ func resourceDistributionCreate(d *schema.ResourceData, meta interface{}) error

        var resp *cloudfront.CreateDistributionWithTagsOutput
        // Handle eventual consistency issues
-       err := resource.Retry(1*time.Minute, func() *resource.RetryError {
+       err := resource.Retry(5*time.Second, func() *resource.RetryError {
                var err error
                resp, err = conn.CreateDistributionWithTags(params)

@@ -946,7 +946,7 @@ func resourceDistributionUpdate(d *schema.ResourceData, meta interface{}) error
        }

        // Handle eventual consistency issues
-       err := resource.Retry(1*time.Minute, func() *resource.RetryError {
+       err := resource.Retry(5*time.Second, func() *resource.RetryError {
                _, err := conn.UpdateDistribution(params)

                // ACM and IAM certificate eventual consistency
diff --git a/internal/service/configservice/sweep.go b/internal/service/configservice/sweep.go
index f874d11951..6897e7becf 100644
--- a/internal/service/configservice/sweep.go
+++ b/internal/service/configservice/sweep.go
@@ -168,7 +168,7 @@ func sweepDeliveryChannels(region string) error {

        req := &configservice.DescribeDeliveryChannelsInput{}
        var resp *configservice.DescribeDeliveryChannelsOutput
-       err = resource.Retry(1*time.Minute, func() *resource.RetryError {
+       err = resource.Retry(5*time.Second, func() *resource.RetryError {
                var err error
                resp, err = conn.DescribeDeliveryChannels(req)
                if err != nil {
diff --git a/internal/service/ec2/sweep.go b/internal/service/ec2/sweep.go
index 5a21f87017..21ade054b3 100644
--- a/internal/service/ec2/sweep.go
+++ b/internal/service/ec2/sweep.go
@@ -1458,7 +1458,7 @@ func sweepSecurityGroups(region string) error {
                        }

                        // Handle EC2 eventual consistency
-                       err := resource.Retry(1*time.Minute, func() *resource.RetryError {
+                       err := resource.Retry(5*time.Second, func() *resource.RetryError {
                                _, err := conn.DeleteSecurityGroup(input)

                                if tfawserr.ErrCodeEquals(err, "DependencyViolation") {
diff --git a/internal/service/ecrpublic/repository.go b/internal/service/ecrpublic/repository.go
index d9e8363101..7e5c36d705 100644
--- a/internal/service/ecrpublic/repository.go
+++ b/internal/service/ecrpublic/repository.go
@@ -151,7 +151,7 @@ func resourceRepositoryRead(d *schema.ResourceData, meta interface{}) error {
        }

        var err error
-       err = resource.Retry(1*time.Minute, func() *resource.RetryError {
+       err = resource.Retry(5*time.Second, func() *resource.RetryError {
                out, err = conn.DescribeRepositories(input)
                if d.IsNewResource() && tfawserr.ErrCodeEquals(err, ecrpublic.ErrCodeRepositoryNotFoundException) {
                        return resource.RetryableError(err)
diff --git a/internal/service/ecs/service_test.go b/internal/service/ecs/service_test.go
index 712a9894a6..10642e2a7d 100644
--- a/internal/service/ecs/service_test.go
+++ b/internal/service/ecs/service_test.go
@@ -1323,7 +1323,7 @@ func testAccCheckServiceExists(name string, service *ecs.Service) resource.TestC
                        Services: []*string{aws.String(rs.Primary.ID)},
                }
                var output *ecs.DescribeServicesOutput
-               err := resource.Retry(1*time.Minute, func() *resource.RetryError {
+               err := resource.Retry(5*time.Second, func() *resource.RetryError {
                        var err error
                        output, err = conn.DescribeServices(input)

diff --git a/internal/service/elbv2/listener_certificate.go b/internal/service/elbv2/listener_certificate.go
index 65f55a8675..2cc4c53662 100644
--- a/internal/service/elbv2/listener_certificate.go
+++ b/internal/service/elbv2/listener_certificate.go
@@ -58,7 +58,7 @@ func resourceListenerCertificateCreate(d *schema.ResourceData, meta interface{})

        log.Printf("[DEBUG] Adding certificate: %s of listener: %s", certificateArn, listenerArn)

-       err := resource.Retry(1*time.Minute, func() *resource.RetryError {
+       err := resource.Retry(5*time.Second, func() *resource.RetryError {
                _, err := conn.AddListenerCertificates(params)

                // Retry for IAM Server Certificate eventual consistency
@@ -97,7 +97,7 @@ func resourceListenerCertificateRead(d *schema.ResourceData, meta interface{}) e
        log.Printf("[DEBUG] Reading certificate: %s of listener: %s", certificateArn, listenerArn)

        var certificate *elbv2.Certificate
-       err = resource.Retry(1*time.Minute, func() *resource.RetryError {
+       err = resource.Retry(5*time.Second, func() *resource.RetryError {
                var err error
                certificate, err = findListenerCertificate(certificateArn, listenerArn, true, nil, conn)
                if err != nil {
diff --git a/internal/service/elbv2/listener_rule.go b/internal/service/elbv2/listener_rule.go
index fe8e19292e..38dd85edc0 100644
--- a/internal/service/elbv2/listener_rule.go
+++ b/internal/service/elbv2/listener_rule.go
@@ -553,7 +553,7 @@ func resourceListenerRuleRead(d *schema.ResourceData, meta interface{}) error {
                RuleArns: []*string{aws.String(d.Id())},
        }

-       err := resource.Retry(1*time.Minute, func() *resource.RetryError {
+       err := resource.Retry(5*time.Second, func() *resource.RetryError {
                var err error
                resp, err = conn.DescribeRules(req)
                if err != nil {
diff --git a/internal/service/emr/cluster.go b/internal/service/emr/cluster.go
index e32fe2869b..147bdb2145 100644
--- a/internal/service/emr/cluster.go
+++ b/internal/service/emr/cluster.go
@@ -1263,7 +1263,7 @@ func resourceClusterUpdate(d *schema.ResourceData, meta interface{}) error {

                        // RemoveAutoScalingPolicy seems to have eventual consistency.
                        // Retry reading Instance Group configuration until the policy is removed.
-                       err := resource.Retry(1*time.Minute, func() *resource.RetryError {
+                       err := resource.Retry(5*time.Second, func() *resource.RetryError {
                                autoscalingPolicy, err := getCoreInstanceGroupAutoScalingPolicy(conn, d.Id())

                                if err != nil {
diff --git a/internal/service/events/permission_test.go b/internal/service/events/permission_test.go
index b1d4e27a34..5f9d8aed44 100644
--- a/internal/service/events/permission_test.go
+++ b/internal/service/events/permission_test.go
@@ -318,7 +318,7 @@ func testAccCheckPermissionDestroy(s *terraform.State) error {
                input := &eventbridge.DescribeEventBusInput{
                        Name: aws.String(eventBusName),
                }
-               err = resource.Retry(1*time.Minute, func() *resource.RetryError {
+               err = resource.Retry(5*time.Second, func() *resource.RetryError {
                        debo, err := conn.DescribeEventBus(input)
                        if tfawserr.ErrCodeEquals(err, eventbridge.ErrCodeResourceNotFoundException) {
                                return nil
diff --git a/internal/service/lexmodels/intent_test.go b/internal/service/lexmodels/intent_test.go
index 9537a5c63f..f737d60abb 100644
--- a/internal/service/lexmodels/intent_test.go
+++ b/internal/service/lexmodels/intent_test.go
@@ -575,7 +575,7 @@ func TestAccLexModelsIntent_updateWithExternalChange(t *testing.T) {
                                        Type: aws.String("ReturnIntent"),
                                },
                        }
-                       err := resource.Retry(1*time.Minute, func() *resource.RetryError {
+                       err := resource.Retry(5*time.Second, func() *resource.RetryError {
                                _, err := conn.PutIntent(input)

                                if tfawserr.ErrCodeEquals(err, lexmodelbuildingservice.ErrCodeConflictException) {
diff --git a/internal/service/neptune/cluster.go b/internal/service/neptune/cluster.go
index dd3248d45d..2b3b1d524f 100644
--- a/internal/service/neptune/cluster.go
+++ b/internal/service/neptune/cluster.go
@@ -732,7 +732,7 @@ func resourceClusterDelete(d *schema.ResourceData, meta interface{}) error {

        log.Printf("[DEBUG] Neptune Cluster delete options: %s", deleteOpts)

-       err := resource.Retry(1*time.Minute, func() *resource.RetryError {
+       err := resource.Retry(5*time.Second, func() *resource.RetryError {
                _, err := conn.DeleteDBCluster(&deleteOpts)
                if err != nil {
                        if tfawserr.ErrMessageContains(err, neptune.ErrCodeInvalidDBClusterStateFault, "is not currently in the available state") {
diff --git a/internal/service/rds/sweep.go b/internal/service/rds/sweep.go
index e0089e8271..33efcab7fe 100644
--- a/internal/service/rds/sweep.go
+++ b/internal/service/rds/sweep.go
@@ -429,7 +429,7 @@ func sweepOptionGroups(region string) error {
                        OptionGroupName: og.OptionGroupName,
                }

-               ret := resource.Retry(1*time.Minute, func() *resource.RetryError {
+               ret := resource.Retry(5*time.Second, func() *resource.RetryError {
                        _, err := conn.DeleteOptionGroup(deleteOpts)
                        if err != nil {
                                if tfawserr.ErrCodeEquals(err, rds.ErrCodeInvalidOptionGroupStateFault) {
diff --git a/internal/service/route53/record.go b/internal/service/route53/record.go
index 689d21387b..b1e8076b30 100644
--- a/internal/service/route53/record.go
+++ b/internal/service/route53/record.go
@@ -22,8 +22,8 @@ import (
 )

 const (
-       recordSetSyncMinDelay = 10
-       recordSetSyncMaxDelay = 30
+       recordSetSyncMinDelay = 1
+       recordSetSyncMaxDelay = 3
 )

 var (
@@ -463,7 +463,7 @@ func resourceRecordCreate(d *schema.ResourceData, meta interface{}) error {

 func ChangeRecordSet(conn *route53.Route53, input *route53.ChangeResourceRecordSetsInput) (interface{}, error) {
        var out *route53.ChangeResourceRecordSetsOutput
-       err := resource.Retry(1*time.Minute, func() *resource.RetryError {
+       err := resource.Retry(5*time.Second, func() *resource.RetryError {
                var err error
                out, err = conn.ChangeResourceRecordSets(input)
                if tfawserr.ErrCodeEquals(err, route53.ErrCodeNoSuchHostedZone) {
diff --git a/internal/service/s3/bucket.go b/internal/service/s3/bucket.go
index 048418def7..3353124ef2 100644
--- a/internal/service/s3/bucket.go
+++ b/internal/service/s3/bucket.go
@@ -1920,7 +1920,7 @@ func resourceBucketInternalPolicyUpdate(conn *s3.S3, d *schema.ResourceData) err
                Policy: aws.String(policy),
        }

-       err = resource.Retry(1*time.Minute, func() *resource.RetryError {
+       err = resource.Retry(5*time.Second, func() *resource.RetryError {
                _, err := conn.PutBucketPolicy(params)
                if tfawserr.ErrCodeEquals(err, ErrCodeMalformedPolicy, s3.ErrCodeNoSuchBucket) {
                        return resource.RetryableError(err)
@@ -1974,7 +1974,7 @@ func resourceBucketInternalReplicationConfigurationUpdate(conn *s3.S3, d *schema
                ReplicationConfiguration: expandBucketReplicationConfiguration(replicationConfiguration),
        }

-       err := resource.Retry(1*time.Minute, func() *resource.RetryError {
+       err := resource.Retry(5*time.Second, func() *resource.RetryError {
                _, err := conn.PutBucketReplication(input)
                if tfawserr.ErrCodeEquals(err, s3.ErrCodeNoSuchBucket) || tfawserr.ErrMessageContains(err, ErrCodeInvalidRequest, "Versioning must be 'Enabled' on the bucket") {
                        return resource.RetryableError(err)
diff --git a/internal/service/s3/bucket_analytics_configuration.go b/internal/service/s3/bucket_analytics_configuration.go
index ad49ac9d0e..360f8a1bd4 100644
--- a/internal/service/s3/bucket_analytics_configuration.go
+++ b/internal/service/s3/bucket_analytics_configuration.go
@@ -147,7 +147,7 @@ func resourceBucketAnalyticsConfigurationPut(d *schema.ResourceData, meta interf
                AnalyticsConfiguration: analyticsConfiguration,
        }

-       err := resource.Retry(1*time.Minute, func() *resource.RetryError {
+       err := resource.Retry(5*time.Second, func() *resource.RetryError {
                _, err := conn.PutBucketAnalyticsConfiguration(input)

                if tfawserr.ErrCodeEquals(err, s3.ErrCodeNoSuchBucket) {
diff --git a/internal/service/s3/bucket_inventory_test.go b/internal/service/s3/bucket_inventory_test.go
index 0cc00f7a46..65ce60437e 100644
--- a/internal/service/s3/bucket_inventory_test.go
+++ b/internal/service/s3/bucket_inventory_test.go
@@ -171,7 +171,7 @@ func testAccCheckBucketInventoryDestroy(s *terraform.State) error {
                        return err
                }

-               err = resource.Retry(1*time.Minute, func() *resource.RetryError {
+               err = resource.Retry(5*time.Second, func() *resource.RetryError {
                        input := &s3.GetBucketInventoryConfigurationInput{
                                Bucket: aws.String(bucket),
                                Id:     aws.String(name),
diff --git a/internal/service/s3/bucket_metric_test.go b/internal/service/s3/bucket_metric_test.go
index 2c89312599..d23354b69f 100644
--- a/internal/service/s3/bucket_metric_test.go
+++ b/internal/service/s3/bucket_metric_test.go
@@ -572,7 +572,7 @@ func testAccCheckBucketMetricDestroy(s *terraform.State) error {
                        return err
                }

-               err = resource.Retry(1*time.Minute, func() *resource.RetryError {
+               err = resource.Retry(5*time.Second, func() *resource.RetryError {
                        input := &s3.GetBucketMetricsConfigurationInput{
                                Bucket: aws.String(bucket),
                                Id:     aws.String(name),
diff --git a/internal/service/s3/bucket_notification_test.go b/internal/service/s3/bucket_notification_test.go
index 8adc892532..9788bbc377 100644
--- a/internal/service/s3/bucket_notification_test.go
+++ b/internal/service/s3/bucket_notification_test.go
@@ -298,7 +298,7 @@ func testAccCheckBucketNotificationDestroy(s *terraform.State) error {
                if rs.Type != "aws_s3_bucket_notification" {
                        continue
                }
-               err := resource.Retry(1*time.Minute, func() *resource.RetryError {
+               err := resource.Retry(5*time.Second, func() *resource.RetryError {
                        out, err := conn.GetBucketNotificationConfiguration(&s3.GetBucketNotificationConfigurationRequest{
                                Bucket: aws.String(rs.Primary.ID),
                        })
@@ -337,7 +337,7 @@ func testAccCheckBucketTopicNotification(n, i, t string, events []string, filter
                topicArn := s.RootModule().Resources[t].Primary.ID
                conn := acctest.Provider.Meta().(*conns.AWSClient).S3Conn

-               err := resource.Retry(1*time.Minute, func() *resource.RetryError {
+               err := resource.Retry(5*time.Second, func() *resource.RetryError {
                        out, err := conn.GetBucketNotificationConfiguration(&s3.GetBucketNotificationConfigurationRequest{
                                Bucket: aws.String(rs.Primary.ID),
                        })
@@ -393,7 +393,7 @@ func testAccCheckBucketEventBridgeNotification(n string) resource.TestCheckFunc
                rs := s.RootModule().Resources[n]
                conn := acctest.Provider.Meta().(*conns.AWSClient).S3Conn

-               err := resource.Retry(1*time.Minute, func() *resource.RetryError {
+               err := resource.Retry(5*time.Second, func() *resource.RetryError {
                        out, err := conn.GetBucketNotificationConfiguration(&s3.GetBucketNotificationConfigurationRequest{
                                Bucket: aws.String(rs.Primary.ID),
                        })
@@ -419,7 +419,7 @@ func testAccCheckBucketQueueNotification(n, i, t string, events []string, filter
                queueArn := s.RootModule().Resources[t].Primary.Attributes["arn"]
                conn := acctest.Provider.Meta().(*conns.AWSClient).S3Conn

-               err := resource.Retry(1*time.Minute, func() *resource.RetryError {
+               err := resource.Retry(5*time.Second, func() *resource.RetryError {
                        out, err := conn.GetBucketNotificationConfiguration(&s3.GetBucketNotificationConfigurationRequest{
                                Bucket: aws.String(rs.Primary.ID),
                        })
@@ -476,7 +476,7 @@ func testAccCheckBucketLambdaFunctionConfiguration(n, i, t string, events []stri
                funcArn := s.RootModule().Resources[t].Primary.Attributes["arn"]
                conn := acctest.Provider.Meta().(*conns.AWSClient).S3Conn

-               err := resource.Retry(1*time.Minute, func() *resource.RetryError {
+               err := resource.Retry(5*time.Second, func() *resource.RetryError {
                        out, err := conn.GetBucketNotificationConfiguration(&s3.GetBucketNotificationConfigurationRequest{
                                Bucket: aws.String(rs.Primary.ID),
                        })
diff --git a/internal/service/s3/bucket_policy.go b/internal/service/s3/bucket_policy.go
index a099c5df39..f9e25fa3cd 100644
--- a/internal/service/s3/bucket_policy.go
+++ b/internal/service/s3/bucket_policy.go
@@ -62,7 +62,7 @@ func resourceBucketPolicyPut(d *schema.ResourceData, meta interface{}) error {
                Policy: aws.String(policy),
        }

-       err = resource.Retry(1*time.Minute, func() *resource.RetryError {
+       err = resource.Retry(5*time.Second, func() *resource.RetryError {
                _, err := conn.PutBucketPolicy(params)
                if tfawserr.ErrCodeEquals(err, "MalformedPolicy") {
                        return resource.RetryableError(err)
diff --git a/internal/service/s3/bucket_public_access_block.go b/internal/service/s3/bucket_public_access_block.go
index 9af056173e..6184cbc13f 100644
--- a/internal/service/s3/bucket_public_access_block.go
+++ b/internal/service/s3/bucket_public_access_block.go
@@ -73,7 +73,7 @@ func resourceBucketPublicAccessBlockCreate(d *schema.ResourceData, meta interfac
        }

        log.Printf("[DEBUG] S3 bucket: %s, public access block: %v", bucket, input.PublicAccessBlockConfiguration)
-       err := resource.Retry(1*time.Minute, func() *resource.RetryError {
+       err := resource.Retry(5*time.Second, func() *resource.RetryError {
                _, err := conn.PutPublicAccessBlock(input)

                if tfawserr.ErrCodeEquals(err, s3.ErrCodeNoSuchBucket) {
diff --git a/internal/service/s3/bucket_public_access_block_test.go b/internal/service/s3/bucket_public_access_block_test.go
index c76093995b..6cec00dbaa 100644
--- a/internal/service/s3/bucket_public_access_block_test.go
+++ b/internal/service/s3/bucket_public_access_block_test.go
@@ -277,7 +277,7 @@ func testAccCheckBucketPublicAccessBlockExists(n string, config *s3.PublicAccess
                }

                var output *s3.GetPublicAccessBlockOutput
-               err := resource.Retry(1*time.Minute, func() *resource.RetryError {
+               err := resource.Retry(5*time.Second, func() *resource.RetryError {
                        var err error
                        output, err = conn.GetPublicAccessBlock(input)

@@ -331,7 +331,7 @@ func testAccCheckBucketPublicAccessBlockDisappears(n string) resource.TestCheckF
                        Bucket: aws.String(rs.Primary.ID),
                }

-               return resource.Retry(1*time.Minute, func() *resource.RetryError {
+               return resource.Retry(5*time.Second, func() *resource.RetryError {
                        _, err := conn.GetPublicAccessBlock(getInput)

                        if tfawserr.ErrCodeEquals(err, tfs3.ErrCodeNoSuchPublicAccessBlockConfiguration) {
diff --git a/internal/service/s3/bucket_test.go b/internal/service/s3/bucket_test.go
index d001a73429..528e5f8e09 100644
--- a/internal/service/s3/bucket_test.go
+++ b/internal/service/s3/bucket_test.go
@@ -2645,7 +2645,7 @@ func testAccCheckBucketDestroyWithProvider(s *terraform.State, provider *schema.
                }

                // Retry for S3 eventual consistency
-               err := resource.Retry(1*time.Minute, func() *resource.RetryError {
+               err := resource.Retry(5*time.Second, func() *resource.RetryError {
                        _, err := conn.HeadBucket(input)

                        if tfawserr.ErrCodeEquals(err, s3.ErrCodeNoSuchBucket) || tfawserr.ErrCodeEquals(err, "NotFound") {
diff --git a/internal/service/s3/sweep.go b/internal/service/s3/sweep.go
index f044c89bed..97f49468a9 100644
--- a/internal/service/s3/sweep.go
+++ b/internal/service/s3/sweep.go
@@ -176,7 +176,7 @@ func sweepBuckets(region string) error {
                }

                log.Printf("[INFO] Deleting S3 Bucket: %s", name)
-               err = resource.Retry(1*time.Minute, func() *resource.RetryError {
+               err = resource.Retry(5*time.Second, func() *resource.RetryError {
                        _, err := conn.DeleteBucket(input)

                        if tfawserr.ErrCodeEquals(err, s3.ErrCodeNoSuchBucket) {
diff --git a/internal/service/s3/tags.go b/internal/service/s3/tags.go
index 6a19661bee..757ce13153 100644
--- a/internal/service/s3/tags.go
+++ b/internal/service/s3/tags.go
@@ -96,7 +96,7 @@ func ObjectListTags(conn *s3.S3, bucket, key string) (tftags.KeyValueTags, error

        var output *s3.GetObjectTaggingOutput

-       err := resource.Retry(1*time.Minute, func() *resource.RetryError {
+       err := resource.Retry(5*time.Second, func() *resource.RetryError {
                var err error
                output, err = conn.GetObjectTagging(input)

diff --git a/internal/service/s3control/account_public_access_block_test.go b/internal/service/s3control/account_public_access_block_test.go
index 5c4b281b94..e7e651a692 100644
--- a/internal/service/s3control/account_public_access_block_test.go
+++ b/internal/service/s3control/account_public_access_block_test.go
@@ -301,7 +301,7 @@ func testAccCheckAccountPublicAccessBlockExists(resourceName string, configurati

                // Retry for eventual consistency
                var output *s3control.GetPublicAccessBlockOutput
-               err := resource.Retry(1*time.Minute, func() *resource.RetryError {
+               err := resource.Retry(5*time.Second, func() *resource.RetryError {
                        var err error
                        output, err = conn.GetPublicAccessBlock(input)

@@ -343,7 +343,7 @@ func testAccCheckAccountPublicAccessBlockDestroy(s *terraform.State) error {
                }

                // Retry for eventual consistency
-               err := resource.Retry(1*time.Minute, func() *resource.RetryError {
+               err := resource.Retry(5*time.Second, func() *resource.RetryError {
                        _, err := conn.GetPublicAccessBlock(input)

                        if tfawserr.ErrCodeEquals(err, s3control.ErrCodeNoSuchPublicAccessBlockConfiguration) {
@@ -385,7 +385,7 @@ func testAccCheckAccountPublicAccessBlockDisappears() resource.TestCheckFunc {
                }

                // Retry for eventual consistency
-               return resource.Retry(1*time.Minute, func() *resource.RetryError {
+               return resource.Retry(5*time.Second, func() *resource.RetryError {
                        _, err := conn.GetPublicAccessBlock(getInput)

                        if tfawserr.ErrCodeEquals(err, s3control.ErrCodeNoSuchPublicAccessBlockConfiguration) {
diff --git a/internal/service/secretsmanager/secret.go b/internal/service/secretsmanager/secret.go
index fb5d78bcfe..57a8d2cfac 100644
--- a/internal/service/secretsmanager/secret.go
+++ b/internal/service/secretsmanager/secret.go
@@ -240,7 +240,7 @@ func resourceSecretCreate(d *schema.ResourceData, meta interface{}) error {
                }

                log.Printf("[DEBUG] Enabling Secrets Manager Secret rotation: %s", input)
-               err := resource.Retry(1*time.Minute, func() *resource.RetryError {
+               err := resource.Retry(5*time.Second, func() *resource.RetryError {
                        _, err := conn.RotateSecret(input)
                        if err != nil {
                                // AccessDeniedException: Secrets Manager cannot invoke the specified Lambda function.
@@ -419,7 +419,7 @@ func resourceSecretUpdate(d *schema.ResourceData, meta interface{}) error {
                        }

                        log.Printf("[DEBUG] Enabling Secrets Manager Secret rotation: %s", input)
-                       err := resource.Retry(1*time.Minute, func() *resource.RetryError {
+                       err := resource.Retry(5*time.Second, func() *resource.RetryError {
                                _, err := conn.RotateSecret(input)
                                if err != nil {
                                        // AccessDeniedException: Secrets Manager cannot invoke the specified Lambda function.
diff --git a/internal/service/secretsmanager/secret_rotation.go b/internal/service/secretsmanager/secret_rotation.go
index 41382903c6..eb034a1260 100644
--- a/internal/service/secretsmanager/secret_rotation.go
+++ b/internal/service/secretsmanager/secret_rotation.go
@@ -70,7 +70,7 @@ func resourceSecretRotationCreate(d *schema.ResourceData, meta interface{}) erro

                log.Printf("[DEBUG] Enabling Secrets Manager Secret rotation: %s", input)
                var output *secretsmanager.RotateSecretOutput
-               err := resource.Retry(1*time.Minute, func() *resource.RetryError {
+               err := resource.Retry(5*time.Second, func() *resource.RetryError {
                        var err error
                        output, err = conn.RotateSecret(input)
                        if err != nil {
@@ -170,7 +170,7 @@ func resourceSecretRotationUpdate(d *schema.ResourceData, meta interface{}) erro
                        }

                        log.Printf("[DEBUG] Enabling Secrets Manager Secret Rotation: %s", input)
-                       err := resource.Retry(1*time.Minute, func() *resource.RetryError {
+                       err := resource.Retry(5*time.Second, func() *resource.RetryError {
                                _, err := conn.RotateSecret(input)
                                if err != nil {
                                        // AccessDeniedException: Secrets Manager cannot invoke the specified Lambda function.
diff --git a/internal/service/ses/template_test.go b/internal/service/ses/template_test.go
index e360d1949d..98bcd50487 100644
--- a/internal/service/ses/template_test.go
+++ b/internal/service/ses/template_test.go
@@ -159,7 +159,7 @@ func testAccCheckTemplateDestroy(s *terraform.State) error {
                if rs.Type != "aws_ses_template" {
                        continue
                }
-               err := resource.Retry(1*time.Minute, func() *resource.RetryError {
+               err := resource.Retry(5*time.Second, func() *resource.RetryError {
                        input := ses.GetTemplateInput{
                                TemplateName: aws.String(rs.Primary.ID),
                        }
diff --git a/internal/service/sfn/activity_test.go b/internal/service/sfn/activity_test.go
index 31815714e3..bc190b3b30 100644
--- a/internal/service/sfn/activity_test.go
+++ b/internal/service/sfn/activity_test.go
@@ -116,7 +116,7 @@ func testAccCheckActivityDestroy(s *terraform.State) error {
                }

                // Retrying as Read after Delete is not always consistent
-               retryErr := resource.Retry(1*time.Minute, func() *resource.RetryError {
+               retryErr := resource.Retry(5*time.Second, func() *resource.RetryError {
                        var err error

                        _, err = conn.DescribeActivity(&sfn.DescribeActivityInput{
diff --git a/internal/service/ssm/resource_data_sync.go b/internal/service/ssm/resource_data_sync.go
index 6814cb6a71..ce9b6f7037 100644
--- a/internal/service/ssm/resource_data_sync.go
+++ b/internal/service/ssm/resource_data_sync.go
@@ -80,7 +80,7 @@ func resourceResourceDataSyncCreate(d *schema.ResourceData, meta interface{}) er
                SyncName:      aws.String(name),
        }

-       err := resource.Retry(1*time.Minute, func() *resource.RetryError {
+       err := resource.Retry(5*time.Second, func() *resource.RetryError {
                _, err := conn.CreateResourceDataSync(input)
                if err != nil {
                        if tfawserr.ErrMessageContains(err, ssm.ErrCodeResourceDataSyncInvalidConfigurationException, "S3 write failed for bucket") {
